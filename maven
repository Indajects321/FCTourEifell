ld Tools:  
===========
  SDLC-->
Devops Process:
  Devops-->Coding --> Build --> Testing--> Deployed 

  Used to create packages for deployment  -- Tomcat

  use to create deployable packages  

What kind of projects are you supporting ?

JAVA  = We support java based projects
          and a few .NET projects
        We support apps written in java,.NET, NodeJS
  java, .NET, NodeJS is a programming language
--------------------------------------
JAVA:
  ANt   ---- build.xml
    1000Lines with ANt 
    400LINES WITH MAVEN
  Maven  --- pom.xml
  Gradle  -- build.gradle

.Net:
----
  Nant
  MSBuild

JAVASCRIPT:
-----------
  Gulp
  Grunt

Python:
-------
  PyBuilder

Ruby:
----
  Rake

NodeJS:
  npm 
===================
Maven Build Tools:
-----------------
https://maven.apache.org/download.cgi

MAVEN = is an open source Java BASED 
          Build  tool

Free: - software is given for free 
         without source code

Licence: The software is paid for

Open source: - implying the both software and 
      the source code are freely available.     
    You can download the source code and 
  develop on the existing features

cocacola 
KFC :
  Recipe (SECRET) 

  FREE--

  open source
    NO Licence 
    Recipe IS GIVEN FOR FREE


Linux  : 
  RedHat = RedHat  (IBM)   
  CentOS = 
  Ubuntu = ubuntu 
  Amazon Linu = Amazon 

File Naming Conventions: 
    bash shell SCRIPT  = test.sh 
                         test.sc
    text files  = *.txt eg  text.txt 
    java files/codes  = *.java eg  test.java 
    yaml / yml files = *.yml eg test.yml
    Python = *.py eg hello.py 

Build means: 
  compiling and creating packages from codes.
  Hello.java  --> 
  hello.sh    --> sh hello.sh 

javac Hello.java  ---> 
jvm = Java Virtual Machine

Maven installation:
  Maven can be installed in Any platform 
    Linux -- 
      RedHat / Ubuntu / CentOS
    Windows
      server2012/2016/2019 
      windows XP/7/8/10 /11
    MacOS 
    Solaris

2. Java is a pre-requisite for maven to run 
    JRE --> JAVA RUNTIME ENVIRONMENT
    JDK --> JAVA DEVELOPMENT KIT 1.8+
            JVM will also be installed

3. 


    hello.java 
      [Hello, Welcome to Landmark]
    javac hello.java 

  where Hello.java is the src code with java extension

  where javac is the command to compile java classes
  This will generate byte code that jvm can understand 
  and do a build

    javac 
    hello.java  -->  
      [Hello, Welcome to Landmark] = 
        Human readable file 

    hello.class 
      [0101010214]
    Hello.Class --> Byte code

maven: creates jar, war and ear packages
  jar: Standalone Applications
    ebay.jar
    paypal.jar
    rbc.jar 
  war: 
    boa.war
    rbc.war
  ear:
    aa.ear 
    boa.ear 

--------------------------
Standalone Applications – *.jar (td.jar)
 micro-services 
Web Applications        – *.war  (boa.war)
Enterprise applications – *.ear  (aa.ear)
-------------------------------------------
Archieves:
  file.zip = unzip
  file.gz.tar 

Standalone Applications – *.jar  Java Archieve
=========================================
 java code ONLY   
    contains only java classes
    jar = .classfiles
    maven-stanalone-application.jar

Web Applications  – .war  web Archieve
======================================
Java code + 
web content (HTML, CSS, JS, images…,) 
Backend code   - frontend code

maven-web-application.war

Enterprise applications – .ear –
==================================
 Enterprise Archieve
    Multiple Modules
      Java code + web content 
    Ear =  war(s) + jar(s)
    Banking applications
    maven-web-application.war
    maven-enterprise-application.ear

Based on our project we going to create 
   multiple either;  jar, war or ear packages:

Maven installations:
  https://maven.apache.org/download.cgi
----------------------------------------
Step3a) Set Environmental Variable  -  
For Specific User
=-#vi ~/.bash_profile

echo "export M2_HOME=/opt/maven" >>  ~/.bash_profile
echo "export PATH=$PATH:$M2_HOME/bin" >> ~/.bash_profile
source ~/.bash_profile

=Step3b) Set Environmental Variable  For All Users
----------------------

Maven home directory = MHD
===================
This is where the maven software is extracted.
 apache-maven-3.8.3-bin.zip
   apache-maven-3.8.3
 wget apache-maven-3.8.3-bin.zip

  /app/maven 
 cd /opt
MHD = /opt/maven 
       /app/maven 
       /opt/maven/bin

   bin --
      binary files 
      mvn   
   conf
      configuration files
      settings.xml
   lib 
   boot

vi $HOME/.bash_profile  
vi ~/.bash_profile 

===========================
What are we building?
 we are building java codes:
   src-- source code
   Unit-Test-Cases 
      JAVA  --> JUnit
      .Net  --> NUnit
      C++  --> CPPUnit
   buildScripts 

 userDetails.sh 
   echo "Welcome to Landmark"
   echo "Please enter your name"
   read name 
   echo "Entered $name. Is tha correct?" 
   read answer
   
 java-code:
  src
    Main
      application-code 
    test 
       unit test cases 
  buildScripts
    maven buildScripts is pom.xml 
      xml = extenable mark-up language
   
<project>
  <groupId>com.mt</groupId>
  <artifactId>maven-web-application</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>

   </project>

  <dependency> 
<!-- https://mvnrepository.com/artifact/log4j/log4j -->
<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency>

<!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>

<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>3.141.59</version>
</dependency>


  </dependency>
   
   Testing = 

   Selenium 
   JUNit 
   log4j
====================
  src 
  test-cases 
  buildScripts
     xml 
  echo "id=1245"  

     <id>1256</id>

 t2-medium is payable 
  100$ per month 
==================
Maven local repository 
   .m2/repository = default 

Maven remote repository 

Maven central repository

====================
sudo yum install maven 
========================
  mvn = command or CLI 
IQ : Explain the maven lifecycle  ??
Maven has 3 lifecycles: 
  Clean, site and default

Lifecycles      Goal(s)
----------      -----   
Clean            clean   (mvn clean)
                   delete old builds 

Site/Swagger     site
                   create java classes (byte code)
                   JVM 

default        mvn validate:
                  It will validate the project structure and resource files
               mvn compile:
                  It will compile all java classes and test cases
               mvn test:
                  It will run the unit test cases (JUNit)
               mvn package:
                  It will create packages in target directory 
                      (*.jar/*.war/*ear) app.war

               mvn install:
                  It will store the build artifacts in MAVEN LOCAL REPO
                     default location: .m2/repository
               
               mvn deploy:  NEXUS
                  It will upload the build artifacts into maven-remote-repo

mvn package: 
  validate
  compile 
  Testing 
  create the packages

Maven uses plugins/dependencies in th build Process.
  Where will maven get plugins in the build process?
   FROM  repositories 

Maven local repository 
   ~/.m2/repository = default 
   ls ~/.m2/repository

Maven remote repository 

Maven central repository
  mvn package:
    LOCAL--->Remote --->Central (MCR)
     LSS     LSS       apache-maven

Total time:  6.610 s    MCR
Total time:  1.445 s    MLC

What problem have you face in your project?
  Maven taking longer than expected time to build.
    Maven-local-repo was accidentally deleted 
            ~/.m2/repository
  We created a custom Maven-local-repo

          /tmp/fintech-mlr
     MHD= 
       conf 
         vi settings.xml
         tag:
          <localRepository>fintech-mlr</localRepository>
          <localRepository>.app/mlr</localRepository>

  comments in xml:
   <!--

   <localRepository>fintech-mlr</localRepository>
   <localRepository>fintech-mlr</localRepository>
   --> 

    <!-- localRepository

 mvn clean package 

  T E S T S
-------------------------------------------------------
Running com.mt.sample.test.HelloWorldTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

mvn package:
  validate -- ok
  compile --> ok
  run tests   passes ok (69990/70000) = 99.99%
  packages are created in the target directory  

  Quality Gates 

IQ:1. Assuming that 699 Testcases passed and 1 fails, 
      what can be done for  maven to still do a build? 
           mvn package -DskipTests

           mvn package -Dmaven.test. skip=true

2. Some  projects are taking long to build how can we resolve the issue:? 
     By skipping the test goal with 
     mvn package -DskipTests 
     or
     mvn package -Dmaven.test. skip=true

pom.xml
  <groupId>com.mt</groupId>
  <artifactId>maven-stanalone-application</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>maven-stanalone-application</name>
pwd:
/home/ec2-user/java-projects/maven-standalone-application

cd /opt/maven/conf
      settings.xml 
         configuration of Maven-local-repo

returning to your projects directory:
  cd - 
  or 
  cd /home/ec2-user/java-projects/maven-standalone-application 
  or
    cd 
    cd java-projects 
    cd maven-standalone-application

  
package:
  maven-stanalone-application-0.0.1-SNAPSHOT.jar


git clone https://github.com/mylandmarktechs/maven-standalone-application

https://github.com/mylandmarktechs/maven-standalone-application

mvn install:
  validate -- ok
  compile --> ok
  run tests   passes ok 
  Create packages in target 

  store packages in the Maven-local-repo  

Explain the d/f b/w mvn package & install:
 PACKAGE CREATES artifacts(packages) in target 
  and will be deleted if we run mvn clean 

 install creates and install packages in target and MLR 
    artifacts in MLR won't be deleted if we run mvn clean.

maven-web-applications:
https://github.com/mylandmarktechs/maven-web-app
  git clone https://github.com/mylandmarktechs/maven-web-app

  maven-web-app.war
  boa-app.war
  paypal-app-0.0.1-SNAPSHOT.war
  app.war 
  maven-web-application-0.0.1-SNAPSHOT.war

mvn package 
   Total time:  4.227 s
   Total time:  1.487 s

  <finalName>boa-app</finalName>

Maven Enterprise applications:
  MavenEnterpriseApp-ear.ear
  MavenEnterpriseApplication.war

git clone https://github.com/mylandmarktechs/maven-enterprise-application

I'm managing federated Enterprise micro-service applications
for a Banking client 
  Enterprise applications with over 21 modules

How can a Specific module be built in maven-enterprise-applications?
       
    mvn  package -pl MavenEnterpriseApp-web
  
    mvn  package -P profilename
      MavenEnterpriseApp-ear  
      MavenEnterpriseApp-web  
      pom.xml

 ${Build_Number}
                        location
   Maven-local-repo   -- maven server
   maven-remote-repo  -- nexus server 
   maven-central-repo -- apache maven 
   Artifacts management:
     Maven-local-repo   -- maven server
     maven-remote-repo  -- nexus server
   Plugins/dependency management:
     Maven-local-repo   -- maven server
     maven-remote-repo  -- nexus server 
     maven-central-repo -- apache maven 

   MAVEN-HOME-DIRECTORY:
      where the maven software is extracted
        bin 
           mvn 
        conf 
           settings.xml
        lib 
        boot 

 How can we trouble-shoot a fail build? 
   Check the logs to understand the Errors 
   mvn -X package (BUILD in debugging mode)
 What is the function of Tomcat -->
 What do we consider in selecting dependencies-->?
     Type of project -- we manage java projects 
                        log4j, JUNit, selenium  

